  </td>
  <td width="537" align="left" valign="top">  

<!--Body Content Here-->

<table width="100%" border="0" cellspacing="8" cellpadding="0">
 <tr>
  <td class="page_title">Fast-Track MSSQL Quick Bruter</td>
 </tr>

 <tr>
<td><p>
<br>
The MSSQL Bruter supports multiple subnets i.e. class A's, class B's, and so on and so forth. You can
also specifiy individual IP addresses. It uses the nmap syntax when performing the port scans. 

The Fast-Track MSSQL Bruter uses a module called PYMSSQL which is a python module for connecting to MSSQL
server ports. Fast-Track first starts off by enumerating open ports on port 1433, there is future plans for
SQL discovery on other ports however this is not currently implemented. After the port has been discovered,
Fast-Track attempts to brute force the "sa" account within SQL. If systems adminstrator rights aren't assigned
to the account, automatic elevation of rights is attempted. If the xp_cmdshell stored procedure is disabled, it
will automatically be re-enabled. 

<br><br>This attack relies heavily off of the xp_cmdshell stored procedure in MSSQL and
without it, will not be successful. The xp_cmdshell stored procedure is a built in stored procedure that comes
shipped with MSSQL, when executing it, underlying system calls can be used to interact with the operating system.
Fast-Track utilizes this attack to drop malicious code on the system through various payload delivery methods.

<br><br>The payload delivery options will be given to you once a successful system
has been compromised. The current method for delivery is the binary to hex conversions which first drops a stager
payload on the affected system through hexadecimal, converts it to binary using windows debug, then transfers the
main payload onto the affected system. The stager payload was created specifically for Fast-Track and is really a 
simple hexadecimal to binary converter. Due to restrictions with windows debug (64kb), this method successfully
bypasses the overall restrictions on windows debug and allows us to deliver whatever size payload.
<br><br>
Fast-Track has a wide variety of payloads that use either custom coded payloads or piggy back the Metasploit
Framework for creation of the payloads. Some of these include reverse tcp shells, reflective VNC injection,
reverse meterpreter shells, and various others.
<br><br>
Example Usage:
<br><br>
IP Address: 192.168.0.1/16<br>
Username: sa
<br><br>
Additional Example:<br>
<br>
IP Address: 192.168.1.1-254<br>
Username: sa<br>
<br>
</p></td>
 </tr>
 <tr>
 <tr>
  <td class="page_title">MSSQL Bruter Options</td>
 </tr>
  <td bgcolor="#2A2A2A">
    <table width="100%" border="0" cellspacing="0" cellpadding="0">
     <tr>
      <td class="box_bg">
        <table width="100%" border="0" cellspacing="15" cellpadding="0">
         <tr>
          <td>
           <FORM NAME="bruter" FORM action="/quickbrutepost" method="post">
           <p class="box_text">The below option needs to be specified in order to identify what IP ranges or IP address you want to attack. Simply type in the range you want to go after in the below field. Some examples are mentioned above.</p>
           <p class="box_text"><b>Enter the IP Address or Range:  <INPUT type="text" class="txtfield_35" name="iprange"></p></b>
           <p class="box_text">Select the payload that you want below, this is what will be delivered once a specific SQL server becomes compromised.
           <p class="box_text"><b>Payload Options:
           <select name="cmbPayloads">
            <option value="1"> Standard Command Prompt </option>
            <option value="2"> Metasploit Reverse VNC TCP </option>
            <option value="3"> Metasploit Meterpreter Shell </option>
            <option value="4"> Metasploit Reflective Meterpreter Shell DLL Injection </option>
            <option value="5" selected> Metasploit Reflective VNC DLL Injection </option>
           </select></p></b>

           <p class="box_text">Below is where you would enter the username, almost always use 'sa' as a default. This is the standard installed by every instance of SQL Server Authentication, if you know another, obviously enter that in below.</p>
           <p class="box_text"><b>Enter the user account to attack: <INPUT type="text" class="txtfield_35" name="user" value="sa"</p><br>
           <p align=center><INPUT type="image" name="attack" src="images/btn_launch_3.jpg" value="Launch"> &nbsp;<a href="javascript:document.bruter.reset()"><img src="images/btn_reset.jpg" border=0 alt="Reset"></a>
          </td>
         </tr>
        </table>
      </td>
     </tr>
     <tr>
      <td><img src="images/fast_track_21.jpg" width="537" height="13" alt=""></td>
     </tr>
    </table>
  </td>
 </tr>
</table>
<p>&nbsp;</p>

<!--Body Content End-->

  <p>&nbsp;</p></td>
 </tr>
</table>    
